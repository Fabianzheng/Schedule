package schedule.view;

import database.DBConnection;
import database.DBoperation;

import java.io.IOException;
import java.net.URL;
import java.sql.*;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;


import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;

import javafx.event.ActionEvent;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Alert;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Label;

import javafx.scene.control.TableView;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Modality;
import javafx.stage.Stage;
import javafx.scene.control.TableColumn;
import schedule.model.Person;

 public class ViewEmployeeController implements Initializable {

//	 public void oKClicked(ActionEvent event) throws IOException { 

	//	  Parent person = FXMLLoader.load(getClass().getResource("Workoverview.fxml"));

      // Scene personScene = new Scene(person);

    //   Stage personStage = (Stage) ((Node) event.getSource()).getScene().getWindow();

    //   personStage.hide();

    //   personStage.setScene(personScene);

    //   personStage.setTitle("Person Overview");

    //   personStage.show();
// }

	 @FXML

     private TableColumn<Person, String> firstNameColumn;

     @FXML

     private TableColumn<Person, String> lastNameColumn;
	 
	 @FXML

    private Label UsernameLabel;

    @FXML

    private Label dbAdminPasswordLabel;

    @FXML

    private Label firstNameLabel;
	 
    
    @FXML

    private Label lastNameLabel;
	 
    @FXML

    private Label addressLabel;

    @FXML

    private Label phoneNumberLabel;

    @FXML

    private Label emailLabel;

    @FXML

    private TableView<Person> personTable;

   // private Stage dialogStage;

   // private Person person;

  //  private boolean okClicked = false;

    private DBConnection database = new DBConnection();
    private Connection connection;
    private Statement statement;
    private ResultSet resultSet;
    
    

    private ObservableList<Person> getDataFromadminAndAddToObservableList(String query){

        ObservableList<Person> adminData = FXCollections.observableArrayList();

        try {

 

            connection = database.getConnection();

            statement = connection.createStatement();

            resultSet = statement.executeQuery(query);//"SELECT * FROM person;"

            while(resultSet.next()){

                         

                         adminData.add(new Person (

                      resultSet.getString("Username"),

                       resultSet.getString("dbAdminPassword"),                        

                        resultSet.getString("firstName"),

                        resultSet.getString("lastName"),

                        resultSet.getString("address"),

                     
                       resultSet.getString("email"),

                        resultSet.getString("phoneNumber")
                        
                        

                ));

              }

            connection.close();

            statement.close();

            resultSet.close();

        } catch (SQLException e) {

            e.printStackTrace();

        }

        return adminData;

    }
    
    
    
    private void showPersonDetails(Person admin) {

        if (admin != null) {

            // Fill the labels with info from the person object.


            



          addressLabel.setText(admin.getAddress());

            emailLabel.setText(admin.getEmail());

            phoneNumberLabel.setText(Integer.toString(admin.getPhoneNumber()));
 

            System.out.print(admin.getFirstName());

        } else {

            // Person is null, remove all the text.

            firstNameLabel.setText("");

            lastNameLabel.setText("");
            addressLabel.setText("");
            emailLabel.setText("");
            phoneNumberLabel.setText("");

           

        

        }

    }

  
 

 

    
    
    // Event Listener on Button.onAction


  
	

    

    //      public void handleEditPerson(ActionEvent event) {

         // TODO Autogenerated
    // Event Listener on Button.onAction

    @FXML

    public void handleDeletePerson(ActionEvent event) {

         // TODO Autogenerated
    }



	@Override
	public void initialize(URL location, ResourceBundle resources) {
		  firstNameColumn.setCellValueFactory(new PropertyValueFactory<Person,String>("firstName"));

	         lastNameColumn.setCellValueFactory(new PropertyValueFactory<Person,String>("lastName"));    

	          ObservableList<Person> data = getDataFromadminAndAddToObservableList("SELECT * FROM admin;");

	          personTable.getItems().addAll(data);     

	    	 
	    	 
	    	 /******* Show Person Details  *******/

	         // Clear person details.

	        



	     // Listen for selection changes and show the person details when changed.

	       personTable.getSelectionModel().selectedItemProperty().addListener(

	         (observable, oldValue, newValue) -> showPersonDetails(newValue)); 

	  
	}

    }